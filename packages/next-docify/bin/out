#!/usr/bin/env node

const { existsSync } = require('fs-extra');
const { join, resolve, relative } = require('path');
const program = require('commander');
const mkdirp = require('mkdirp');
const cp = require('recursive-copy')
const rimraf = require('rimraf');
const exportApp = require('next/dist/server/export').default;
const siteConfig = require('../lib/siteConfig');

program
  .description('export standalone static assets')
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ next-notify export');
    console.log();
  });

program.parse(process.argv);

process.env.NODE_ENV = 'production';

const dir = resolve('.');

const options = {
  silent: program.silent,
  outdir: program.outdir ? resolve(program.outdir) : resolve(dir, 'out')
}

rimraf.sync(resolve('.', 'out'));

exportApp(dir, options).then(() => {
  if (existsSync(join(process.cwd(), '.next', 'chunk'))) {
    mkdirp(join(process.cwd(), 'out', '_next', 'webpack'), () => {
     cp (
        join(process.cwd(), '.next', 'chunk'),
        join(process.cwd(), 'out', '_next', 'webpack', 'chunk'), (err) => {
          if (err) console.error('err : ', err);
        }
      );
    });
  }

  const transferIndexFile = (config) => {
    const { accessPath, component } = config;
    const relativePath = relative(resolve('.', 'pages'), resolve('.', component));

    const sourceIndexDir = join(process.cwd(), 'out', relativePath);
    const targetIndexDir = join(process.cwd(), 'out', accessPath);
    const sourceIndexFile = join(sourceIndexDir, 'index.html');
    const targetIndexFile = join(targetIndexDir, 'index.html');


    if (!existsSync(targetIndexFile)) {
      mkdirp.sync(targetIndexDir);
      cp(sourceIndexFile, targetIndexFile, (err) => {
        if (err) console.error('err: ', err);
      });
    }
  };

  const configs = siteConfig.resolveSiteConfig();
  configs.forEach(config => transferIndexFile(config));
}).catch((err) => {
  console.error(err);
});
